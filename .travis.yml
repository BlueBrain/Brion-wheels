env:
  global:
    - REPO_DIR=Brion
    # Commit from your-project that you want to build
    - BUILD_COMMIT=HEAD
    # pip dependencies to _build_ your project
    - BUILD_DEPENDS="numpy"
    # pip dependencies to _test_ your project.  Include any dependencies
    # that you need, that are also specified in BUILD_DEPENDS, this will be
    # a separate install.
    - TEST_DEPENDS="numpy nose"
    - PLAT=x86_64
    - UNICODE_WIDTH=32
    - MB_ML_VER=2010

# You will likely prefer "language: generic" for travis configuration,
# rather than, say "language: python". Multibuild doesn't use
# Travis-provided Python but rather installs and uses its own, where the
# Python version is set from the MB_PYTHON_VERSION variable. You can still
# specify a language here if you need it for some unrelated logic and you
# can't use Multibuild-provided Python or other software present on a
# builder.
language: generic

# Required in Linux to invoke `docker` ourselves
services: docker

# Host distribution.  This is the distribution from which we run the build
# and test containers, via docker.
dist: xenial

cache:
  directories:
    - $HOME/.cache/pip
    - $HOME/Library/Caches/Homebrew

jobs:
  include:
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.8
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.8
        - PLAT=i686

    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=3.6
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=3.7
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=3.8

before_install:
  - source multibuild/common_utils.sh
  - source multibuild/travis_steps.sh
  - clean_code $REPO_DIR $BUILD_COMMIT
  - before_install

install:
  # Maybe get and clean and patch source
  - build_wheel $REPO_DIR $PLAT

script:
  - install_run $PLAT

after_success:
  # Copy compiled wheels to dist/ where Travis `dpl`
  # tool can find them and upload to PyPI
  - mkdir -p dist; mkdir -p dist/fixeddist
  - cp ${TRAVIS_BUILD_DIR}/wheelhouse/*.whl dist
  - pip install auditwheel
  - auditwheel repair -w dist/fixeddist dist/*.whl
  - pip install twine
  - twine upload --verbose -u bbp.opensource -p ${PYPI_PASSWORD} \
    dist/fixeddist/*
